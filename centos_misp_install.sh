#!/bin/bash
# <snippet-begin 0_global-vars.sh>
  debug "Setting generic ${LBLUE}MISP${NC} variables shared by all flavours" 2> /dev/null
  MISP_USER='misp'
  MISP_PASSWORD="$(openssl rand -hex 32)"

  PATH_TO_MISP='/var/www/MISP'
  WWW_USER='apache'
  SUDO_WWW="sudo -H -u ${WWW_USER} "
  FQDN="misp.local"
  MISP_BASEURL='""'
  MISP_LIVE='1'
  
  DBHOST='localhost'
  DBNAME='misp'
  DBUSER_ADMIN='root'
  DBPASSWORD_ADMIN="$(openssl rand -hex 32)"
  DBUSER_MISP='misp'
  DBPASSWORD_MISP="$(openssl rand -hex 32)"

  OPENSSL_CN=${FQDN}
  OPENSSL_C='LU'
  OPENSSL_ST='State'
  OPENSSL_L='Location'
  OPENSSL_O='Organization'
  OPENSSL_OU='Organizational Unit'
  OPENSSL_EMAILADDRESS="info@${FQDN}"

  GPG_REAL_NAME='Autogenerated Key'
  GPG_COMMENT='WARNING: MISP AutoGenerated Key consider this Key VOID!'
  GPG_EMAIL_ADDRESS='admin@admin.test'
  GPG_KEY_LENGTH='3072'
  GPG_PASSPHRASE="$(openssl rand -hex 32)"

  alias debug="echo -e"
  alias checkAptLock="echo 'Function used in Installer to make sure apt is not locked'"

  upload_max_filesize=50M
  post_max_size=50M
  max_execution_time=300
  memory_limit=2048M

  CAKE="${PATH_TO_MISP}/app/Console/cake"
  SUDO_CMD="sudo -H -u ${MISP_USER}"

  echo "The following DB Passwords were generated..."
  echo "Admin (${DBUSER_ADMIN}) DB Password: ${DBPASSWORD_ADMIN}"
  echo "User  (${DBUSER_MISP}) DB Password: ${DBPASSWORD_MISP}"
# <snippet-end 0_global-vars.sh>

sudo hostnamectl set-hostname misp.local #scegliere il nome che si preferisce
sudo yum install drpm -y
sudo yum update -y
sudo yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm -y

# <snippet-begin 0_yumInstallCoreDeps.sh>
  # Install the dependencies:
  sudo yum install @httpd -y
  sudo yum install gcc git zip httpd mod_ssl redis mariadb mariadb-server python3-devel python3-pip python3-virtualenv python3-policycoreutils libxslt-devel zlib-devel ssdeep-devel -y
  sudo alternatives --set python /usr/bin/python3

  # Enable and start redis
  sudo systemctl enable --now redis.service

  PHP_INI=/etc/php.ini
  sudo yum install php php-fpm php-devel php-pear php-mysqlnd php-mbstring php-xml php-bcmath php-opcache php-json php-gd -y
# <snippet-end 0_yumInstallCoreDeps.sh>

sudo systemctl enable --now php-fpm.service

# <snippet-begin 0_yumInstallHaveged.sh>
sudo yum install haveged -y
sudo systemctl enable --now haveged.service
# <snippet-end 0_yumInstallHaveged.sh>

# <snippet-begin 1_mispCoreInstall_RHEL.sh>
  # Download MISP using git in the /var/www/ directory.
  sudo mkdir /var/www/MISP
  sudo chown -R apache:apache /var/www/MISP
  cd /var/www
  sudo -H -u apache git clone https://github.com/MISP/MISP.git
  
  cd /var/www/MISP
  # Fetch submodules
  sudo -H -u apache git submodule update --init --recursive
  # Make git ignore filesystem permission differences for submodules
  sudo -H -u apache git submodule foreach --recursive git config core.filemode false
  # Make git ignore filesystem permission differences
  sudo -H -u apache git config core.filemode false

  # Create a python3 virtualenv
  sudo -H -u apache virtualenv-3 -p python3 /var/www/MISP/venv
  sudo mkdir /usr/share/httpd/.cache
  sudo chown apache:apache /usr/share/httpd/.cache
  sudo -H -u apache /var/www/MISP/venv/bin/pip install -U pip setuptools

  cd /var/www/MISP/app/files/scripts
  sudo -H -u apache git clone https://github.com/CybOXProject/python-cybox.git
  sudo -H -u apache git clone https://github.com/STIXProject/python-stix.git
  sudo -H -u apache git clone --branch master --single-branch https://github.com/lief-project/LIEF.git lief
  sudo -H -u apache git clone https://github.com/CybOXProject/mixbox.git

  cd /var/www/MISP/app/files/scripts/python-cybox
  # If you umask is has been changed from the default, it is a good idea to reset it to 0022 before installing python modules
  UMASK=$(umask)
  umask 0022
  cd /var/www/MISP/app/files/scripts/python-stix
  sudo -H -u apache /var/www/MISP/venv/bin/pip install .

  # install mixbox to accommodate the new STIX dependencies:
  cd /var/www/MISP/app/files/scripts/mixbox
  sudo -H -u apache /var/www/MISP/venv/bin/pip install .

  # install STIX2.0 library to support STIX 2.0 export:
  cd /var/www/MISP/cti-python-stix2
  sudo -H -u apache /var/www/MISP/venv/bin/pip install .

  # install maec
  sudo -H -u apache /var/www/MISP/venv/bin/pip install -U maec

  # install zmq
  sudo -H -u apache /var/www/MISP/venv/bin/pip install -U zmq

  # install redis
  sudo -H -u apache /var/www/MISP/venv/bin/pip install -U redis

  # lief needs manual compilation
  sudo yum groupinstall "Development Tools" -y
  sudo yum install cmake3 -y

  cd /var/www/MISP/app/files/scripts/lief
  sudo -H -u apache mkdir build
  cd build
  dnf --enablerepo=PowerTools install cppcheck
  sudo -H -u apache cmake3 -DLIEF_PYTHON_API=on -DPYTHON_VERSION=3.6 -DPYTHON_EXECUTABLE=/var/www/MISP/venv/bin/python -DLIEF_DOC=off -DCMAKE_BUILD_TYPE=Release ..
  sudo -H -u apache make -j3 pyLIEF

  if [ $? == 2 ]; then
    sudo dd if=/dev/zero of=/var/swap.img bs=1024k count=4000
    sudo mkswap /var/swap.img
    sudo swapon /var/swap.img
    # And compile again
    sudo -H -u apache make -j3 pyLIEF
    sudo swapoff /var/swap.img
    sudo rm /var/swap.img
  fi

  echo /var/www/MISP/app/files/scripts/lief/build/api/python |sudo -H -u apache tee /var/www/MISP/venv/lib/python3.6/site-packages/lief.pth

  # install magic, pydeep
  sudo -H -u apache /var/www/MISP/venv/bin/pip install -U python-magic git+https://github.com/kbandla/pydeep.git plyara

  # install PyMISP
  cd /var/www/MISP/PyMISP
  sudo -H -u apache /var/www/MISP/venv/bin/pip install -U .

  # FIXME: Remove libfaup etc once the egg has the library baked-in
  dnf install libcaca-devel
  dnf --enablerepo=PowerTools install lua-devel
  cd /tmp
  [[ ! -d "faup" ]] && sudo -H -u misp git clone git://github.com/stricaud/faup.git faup
  [[ ! -d "gtcaca" ]] && sudo -H -u misp git clone git://github.com/stricaud/gtcaca.git gtcaca
  sudo chown -R misp:misp faup gtcaca # NON FUNZIONA, forse perchè non c'è l'utente MISP? Potrebbe essere necessario sostituire con il nome utente della macchina
  cd gtcaca
  sudo -H -u misp mkdir -p build
  cd build
  sudo -H -u misp cmake .. && sudo -H -u misp make
  sudo make install
  cd ../../faup
  sudo -H -u misp mkdir -p build
  cd build
  sudo -H -u misp cmake .. && sudo -H -u misp make
  sudo make install
  sudo ldconfig

  # Enable python3 for php-fpm
  sudo sed -i.org -e 's/^;\(clear_env = no\)/\1/' /etc/php-fpm.d/www.conf
  sudo systemctl restart php-fpm.service

  umask $UMASK

  # Enable dependencies detection in the diagnostics page
  # This allows MISP to detect GnuPG, the Python modules' versions and to read the PHP settings.
  echo "env[PATH] = /usr/local/bin:/usr/bin:/bin" |sudo tee -a /etc/php-fpm.d/www.conf
  sudo systemctl restart php-fpm.service
# <snippet-end 1_mispCoreInstall_RHEL.sh>

# <snippet-begin 1_installCake_RHEL.sh>

  sudo chown -R apache:apache /var/www/MISP
  sudo mkdir /usr/share/httpd/.composer
  sudo chown apache:apache /usr/share/httpd/.composer
  cd /var/www/MISP/app

  rm -f composer.lock
  sudo -H -u apache php composer.phar install

  sudo pecl channel-update pecl.php.net
  sudo pecl install redis
  echo "extension=redis.so" |sudo tee /etc/php-fpm.d/redis.ini
  sudo ln -s /etc/php-fpm.d/redis.ini /etc/php.d/99-redis.ini
  sudo systemctl restart php-fpm.service

  # Install gnupg extension
  dnf --enablerepo=PowerTools install gpgme-devel -y
  sudo pecl install gnupg
  echo "extension=gnupg.so" |sudo tee /etc/php-fpm.d/gnupg.ini
  sudo ln -s /etc/php-fpm.d/gnupg.ini /etc/php.d/99-gnupg.ini
  sudo systemctl restart php-fpm.service

  # If you have not yet set a timezone in php.ini
  echo 'date.timezone = "Asia/Tokyo"' |sudo tee /etc/php-fpm.d/timezone.ini
  sudo ln -s ../php-fpm.d/timezone.ini /etc/php.d/99-timezone.ini

  # Recommended: Change some PHP settings in /etc/php.ini -- Decommenta per farlo funzionare
  # max_execution_time = 300
  # memory_limit = 2048M
  # upload_max_filesize = 50M
  # post_max_size = 50M
  #for key in upload_max_filesize post_max_size max_execution_time max_input_time memory_limit
  #do
  #    sudo sed -i "s/^\($key\).*/\1 = $(eval echo \${$key})/" /etc/php.ini
  #done
  #sudo systemctl restart php-fpm.service

  # To use the scheduler worker for scheduled tasks, do the following:
  sudo cp -fa /var/www/MISP/INSTALL/setup/config.php /var/www/MISP/app/Plugin/CakeResque/Config/config.php
# <snippet-begin 1_installCake_RHEL.sh>

# <snippet-begin 2_permissions_RHEL.sh>
# Main function to fix permissions to something sane
  sudo chown -R apache:apache /var/www/MISP
  ## ? chown -R root:apache /var/www/MISP
  sudo find /var/www/MISP -type d -exec chmod g=rx {} \;
  sudo chmod -R g+r,o= /var/www/MISP
  ## **Note :** For updates through the web interface to work, apache must own the /var/www/MISP folder and its subfolders as shown above, which can lead to security issues. If you do not require updates through the web interface to work, you can use the following more restrictive permissions :
  #sudo chmod -R 750 /var/www/MISP
  #sudo chmod -R g+xws /var/www/MISP/app/tmp
  #sudo chmod -R g+ws /var/www/MISP/app/files
  #sudo chmod -R g+ws /var/www/MISP/app/files/scripts/tmp
  #sudo chmod -R g+rw /var/www/MISP/venv
  #sudo chmod -R g+rw /var/www/MISP/.git
  #sudo chown apache:apache /var/www/MISP/app/files
  #sudo chown apache:apache /var/www/MISP/app/files/terms
  #sudo chown apache:apache /var/www/MISP/app/files/scripts/tmp
  #sudo chown apache:apache /var/www/MISP/app/Plugin/CakeResque/tmp
  #sudo chown -R apache:apache /var/www/MISP/app/Config
  #sudo chown -R apache:apache /var/www/MISP/app/tmp
  #sudo chown -R apache:apache /var/www/MISP/app/webroot/img/orgs
  #sudo chown -R apache:apache /var/www/MISP/app/webroot/img/custom
# <snippet-end 2_permissions_RHEL.sh>

# <snippet-begin 1_prepareDB_RHEL.sh>
  # Enable, start and secure your mysql database server
  sudo systemctl enable --now mariadb.service
  echo [mysqld] |sudo tee /etc/my.cnf.d/bind-address.cnf
  echo bind-address=127.0.0.1 |sudo tee -a /etc/my.cnf.d/bind-address.cnf
  sudo systemctl restart mariadb

  sudo yum install expect -y

  # Add your credentials if needed, if sudo has NOPASS, comment out the relevant lines
  pw="Password1234"
  expect -f - <<-EOF
    set timeout 10

    spawn sudo mysql_secure_installation
    expect "*?assword*"
    send -- "$pw\r"
    expect "Enter current password for root (enter for none):"
    send -- "\r"
    expect "Set root password?"
    send -- "y\r"
    expect "New password:"
    send -- "${DBPASSWORD_ADMIN}\r"
    expect "Re-enter new password:"
    send -- "${DBPASSWORD_ADMIN}\r"
    expect "Remove anonymous users?"
    send -- "y\r"
    expect "Disallow root login remotely?"
    send -- "y\r"
    expect "Remove test database and access to it?"
    send -- "y\r"
    expect "Reload privilege tables now?"
    send -- "y\r"
    expect eof
EOF

  sudo yum remove tcl expect -y

  sudo systemctl restart mariadb

  mysql -u root -p$DBPASSWORD_ADMIN -e "CREATE DATABASE misp;"
  mysql -u root -p$DBPASSWORD_ADMIN -e "GRANT USAGE on *.* to misp@localhost IDENTIFIED by '$DBPASSWORD_MISP';"
  mysql -u root -p$DBPASSWORD_ADMIN -e "GRANT ALL PRIVILEGES on misp.* to 'misp'@'localhost';"
  mysql -u root -p$DBPASSWORD_ADMIN -e 'FLUSH PRIVILEGES;'

  sudo -H -u apache cat /var/www/MISP/INSTALL/MYSQL.sql | mysql -u misp -p$DBPASSWORD_MISP misp
# <snippet-end 1_prepareDB_RHEL.sh>

# <snippet-begin 1_apacheConfig_RHEL.sh>
  # Now configure your apache server with the DocumentRoot /var/www/MISP/app/webroot/
  # A sample vhost can be found in /var/www/MISP/INSTALL/apache.misp.centos7

  sudo cp /var/www/MISP/INSTALL/apache.misp.centos7.ssl /etc/httpd/conf.d/misp.ssl.conf
  sudo sed -i "s/SetHandler/\#SetHandler/g" /etc/httpd/conf.d/misp.ssl.conf
  sudo rm /etc/httpd/conf.d/ssl.conf
  sudo chmod 644 /etc/httpd/conf.d/misp.ssl.conf
  sudo sed -i '/Listen 80/a Listen 443' /etc/httpd/conf/httpd.conf

  # If a valid SSL certificate is not already created for the server, create a self-signed certificate:
  echo "The Common Name used below will be: ${OPENSSL_CN}"
  # This will take a rather long time, be ready. (13min on a VM, 8GB Ram, 1 core)
  if [[ ! -e "/etc/pki/tls/certs/dhparam.pem" ]]; then
    sudo openssl dhparam -out /etc/pki/tls/certs/dhparam.pem 4096
  fi
  sudo openssl genrsa -des3 -passout pass:xxxx -out /tmp/misp.local.key 4096
  sudo openssl rsa -passin pass:xxxx -in /tmp/misp.local.key -out /etc/pki/tls/private/misp.local.key
  sudo rm /tmp/misp.local.key
  sudo openssl req -new -subj "/C=${OPENSSL_C}/ST=${OPENSSL_ST}/L=${OPENSSL_L}/O=${OPENSSL_O}/OU=${OPENSSL_OU}/CN=${OPENSSL_CN}/emailAddress=${OPENSSL_EMAILADDRESS}" -key /etc/pki/tls/private/misp.local.key -out /etc/pki/tls/certs/misp.local.csr
  sudo openssl x509 -req -days 365 -in /etc/pki/tls/certs/misp.local.csr -signkey /etc/pki/tls/private/misp.local.key -out /etc/pki/tls/certs/misp.local.crt
  sudo ln -s /etc/pki/tls/certs/misp.local.csr /etc/pki/tls/certs/misp-chain.crt
  cat /etc/pki/tls/certs/dhparam.pem |sudo tee -a /etc/pki/tls/certs/misp.local.crt 

  sudo systemctl restart httpd.service

  # Since SELinux is enabled, we need to allow httpd to write to certain directories
  sudo chcon -t httpd_sys_rw_content_t /var/www/MISP/app/files
  sudo chcon -t httpd_sys_rw_content_t /var/www/MISP/app/files/terms
  sudo chcon -t httpd_sys_rw_content_t /var/www/MISP/app/files/scripts/tmp
  sudo chcon -t httpd_sys_rw_content_t /var/www/MISP/app/Plugin/CakeResque/tmp
  sudo chcon -t httpd_sys_script_exec_t /var/www/MISP/app/Console/cake
  sudo chcon -t httpd_sys_script_exec_t /var/www/MISP/app/Console/worker/start.sh
  sudo chcon -t httpd_sys_script_exec_t /var/www/MISP/app/files/scripts/mispzmq/mispzmq.py
  sudo chcon -t httpd_sys_script_exec_t /var/www/MISP/app/files/scripts/mispzmq/mispzmqtest.py
  sudo chcon -t httpd_sys_script_exec_t /var/www/MISP/app/files/scripts/lief/build/api/python/lief.so
  sudo chcon -t httpd_sys_script_exec_t /var/www/MISP/app/Vendor/pear/crypt_gpg/scripts/crypt-gpg-pinentry
  sudo chcon -t httpd_sys_rw_content_t /tmp
  sudo chcon -R -t usr_t /var/www/MISP/venv
  sudo chcon -R -t httpd_sys_rw_content_t /var/www/MISP/.git
  sudo chcon -R -t httpd_sys_rw_content_t /var/www/MISP/app/tmp
  sudo chcon -R -t httpd_sys_rw_content_t /var/www/MISP/app/Lib
  sudo chcon -R -t httpd_sys_rw_content_t /var/www/MISP/app/Config
  sudo chcon -R -t httpd_sys_rw_content_t /var/www/MISP/app/webroot/img/orgs
  sudo chcon -R -t httpd_sys_rw_content_t /var/www/MISP/app/webroot/img/custom
  sudo chcon -R -t httpd_sys_rw_content_t /var/www/MISP/app/files/scripts/mispzmq
# <snippet-end 1_apacheConfig_RHEL.sh>

# <snippet-begin 1_firewall_RHEL.sh>
  # Allow httpd to connect to the redis server and php-fpm over tcp/ip
  sudo setsebool -P httpd_can_network_connect on

  # Allow httpd to send emails from php
  sudo setsebool -P httpd_can_sendmail on

  # Enable and start the httpd service
  sudo systemctl enable --now httpd.service

  # Open a hole in the iptables firewall
  sudo firewall-cmd --zone=public --add-port=80/tcp --permanent
  sudo firewall-cmd --zone=public --add-port=443/tcp --permanent
  sudo firewall-cmd --reload
# <snippet-end 1_firewall_RHEL.sh>

# <snippet-begin 2_logRotation_RHEL.sh>
  # MISP saves the stdout and stderr of its workers in /var/www/MISP/app/tmp/logs
  # To rotate these logs install the supplied logrotate script:

  sudo cp /var/www/MISP/INSTALL/misp.logrotate /etc/logrotate.d/misp
  sudo chmod 0640 /etc/logrotate.d/misp

  # Now make logrotate work under SELinux as well
  yum install -y policycoreutils-python-utils
  # Allow logrotate to modify the log files
  sudo semanage fcontext -a -t httpd_sys_rw_content_t "/var/www/MISP(/.*)?"
  sudo semanage fcontext -a -t httpd_log_t "/var/www/MISP/app/tmp/logs(/.*)?"
  sudo chcon -R -t httpd_log_t /var/www/MISP/app/tmp/logs
  sudo chcon -R -t httpd_sys_rw_content_t /var/www/MISP/app/tmp/logs
  # Impact of the following: ?!?!?!!?111
  sudo restorecon -R /var/www/MISP/

  # Allow logrotate to read /var/www
  sudo checkmodule -M -m -o /tmp/misplogrotate.mod /var/www/MISP/INSTALL/misplogrotate.te
  sudo semodule_package -o /tmp/misplogrotate.pp -m /tmp/misplogrotate.mod
  sudo semodule -i /tmp/misplogrotate.pp

# <snippet-end 2_logRotation_RHEL.sh>

# <snippet-begin 2_configMISP_RHEL.sh>

  # There are 4 sample configuration files in /var/www/MISP/app/Config that need to be copied
  sudo -H -u apache cp -a /var/www/MISP/app/Config/bootstrap.default.php /var/www/MISP/app/Config/bootstrap.php
  sudo -H -u apache cp -a /var/www/MISP/app/Config/database.default.php /var/www/MISP/app/Config/database.php
  sudo -H -u apache cp -a /var/www/MISP/app/Config/core.default.php /var/www/MISP/app/Config/core.php
  sudo -H -u apache cp -a /var/www/MISP/app/Config/config.default.php /var/www/MISP/app/Config/config.php

  echo "<?php
  class DATABASE_CONFIG {
          public \$default = array(
                  'datasource' => 'Database/Mysql',
                  //'datasource' => 'Database/Postgres',
                  'persistent' => false,
                  'host' => '$DBHOST',
                  'login' => '$DBUSER_MISP',
                  'port' => 3306, // MySQL & MariaDB
                  //'port' => 5432, // PostgreSQL
                  'password' => '$DBPASSWORD_MISP',
                  'database' => '$DBNAME',
                  'prefix' => '',
                  'encoding' => 'utf8',
          );
  }" | sudo -H -u apache tee /var/www/MISP/app/Config/database.php

  #                                               QUESTA PARTE POTREBBE TORNARE UTILE
  # Configure the fields in the newly created files:
  # config.php   : baseurl (example: 'baseurl' => 'http://misp',) - don't use "localhost" it causes issues when browsing externally
  # core.php   : Uncomment and set the timezone: `// date_default_timezone_set('UTC');`
  # database.php : login, port, password, database
  # DATABASE_CONFIG has to be filled
  # With the default values provided in section 6, this would look like:
  # class DATABASE_CONFIG {
  #   public $default = array(
  #       'datasource' => 'Database/Mysql',
  #       'persistent' => false,
  #       'host' => 'localhost',
  #       'login' => 'misp', // grant usage on *.* to misp@localhost
  #       'port' => 3306,
  #       'password' => 'XXXXdbpasswordhereXXXXX', // identified by 'XXXXdbpasswordhereXXXXX';
  #       'database' => 'misp', // create database misp;
  #       'prefix' => '',
  #       'encoding' => 'utf8',
  #   );
  #}

  # Important! Change the salt key in /var/www/MISP/app/Config/config.php
  # The admin user account will be generated on the first login, make sure that the salt is changed before you create that user
  # If you forget to do this step, and you are still dealing with a fresh installation, just alter the salt,
  # delete the user from mysql and log in again using the default admin credentials (admin@admin.test / admin)

  # If you want to be able to change configuration parameters from the webinterface:
  sudo chown apache:apache /var/www/MISP/app/Config/config.php
  sudo chcon -t httpd_sys_rw_content_t /var/www/MISP/app/Config/config.php

  # Generate a GPG encryption key.
  cat >/tmp/gen-key-script <<EOF
      %echo Generating a default key
      Key-Type: default
      Key-Length: $GPG_KEY_LENGTH
      Subkey-Type: default
      Name-Real: $GPG_REAL_NAME
      Name-Comment: $GPG_COMMENT
      Name-Email: $GPG_EMAIL_ADDRESS
      Expire-Date: 0
      Passphrase: $GPG_PASSPHRASE
      # Do a commit here, so that we can later print "done"
      %commit
      %echo done
EOF

  sudo gpg --homedir /var/www/MISP/.gnupg --batch --gen-key /tmp/gen-key-script
  sudo rm -f /tmp/gen-key-script
  sudo chown -R apache:apache /var/www/MISP/.gnupg
  sudo chcon -R -t httpd_sys_rw_content_t /var/www/MISP/.gnupg

  # And export the public key to the webroot
  sudo gpg --homedir /var/www/MISP/.gnupg --export --armor $GPG_EMAIL_ADDRESS |sudo tee /var/www/MISP/app/webroot/gpg.asc
  sudo chown apache:apache /var/www/MISP/app/webroot/gpg.asc

  echo "Admin (root) DB Password: $DBPASSWORD_ADMIN"
  echo "User  (misp) DB Password: $DBPASSWORD_MISP"
# <snippet-end 2_configMISP_RHEL.sh>

# Create a systemd unit for the workers
echo "[Unit]
Description=MISP background workers
After=mariadb.service redis.service fpm.service

[Service]
Type=forking
User=apache
Group=apache
ExecStart=/bin/bash /var/www/MISP/app/Console/worker/start.sh
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target" |sudo tee /etc/systemd/system/misp-workers.service

# Make the workers' script executable and reload the systemd units
sudo chmod +x /var/www/MISP/app/Console/worker/start.sh
sudo systemctl daemon-reload  # NON FUNZIONANO I WORKERS